// Generated by view binder compiler. Do not edit!
package com.android.sheguard.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.android.sheguard.R;
import com.google.android.material.textview.MaterialTextView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ViewContactsListItemBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ImageView copy;

  @NonNull
  public final ImageView delete;

  @NonNull
  public final MaterialTextView initials;

  @NonNull
  public final MaterialTextView name;

  @NonNull
  public final MaterialTextView number;

  private ViewContactsListItemBinding(@NonNull LinearLayout rootView, @NonNull ImageView copy,
      @NonNull ImageView delete, @NonNull MaterialTextView initials, @NonNull MaterialTextView name,
      @NonNull MaterialTextView number) {
    this.rootView = rootView;
    this.copy = copy;
    this.delete = delete;
    this.initials = initials;
    this.name = name;
    this.number = number;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ViewContactsListItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ViewContactsListItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.view_contacts_list_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ViewContactsListItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.copy;
      ImageView copy = ViewBindings.findChildViewById(rootView, id);
      if (copy == null) {
        break missingId;
      }

      id = R.id.delete;
      ImageView delete = ViewBindings.findChildViewById(rootView, id);
      if (delete == null) {
        break missingId;
      }

      id = R.id.initials;
      MaterialTextView initials = ViewBindings.findChildViewById(rootView, id);
      if (initials == null) {
        break missingId;
      }

      id = R.id.name;
      MaterialTextView name = ViewBindings.findChildViewById(rootView, id);
      if (name == null) {
        break missingId;
      }

      id = R.id.number;
      MaterialTextView number = ViewBindings.findChildViewById(rootView, id);
      if (number == null) {
        break missingId;
      }

      return new ViewContactsListItemBinding((LinearLayout) rootView, copy, delete, initials, name,
          number);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
